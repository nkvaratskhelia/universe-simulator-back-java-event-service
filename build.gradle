plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.7.1'
    id 'org.sonarqube' version '3.3'
    id 'org.owasp.dependencycheck' version '7.1.1'
}

group = 'com.example.universe.simulator'
version = '1.0.0'
sourceCompatibility = '17'

idea {
    module {
        downloadJavadoc = true
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def coverageExclusions = [
        '**/com/example/universe/simulator/eventservice/EventServiceApplication.*',
        '**/com/example/universe/simulator/eventservice/entities/Event.*'
]

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusions)
        }))
    }
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusions)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'universe-simulator'
        property 'sonar.login', System.getenv('US_SONARQUBE_TOKEN')
        property 'sonar.coverage.exclusions', coverageExclusions
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
}

bootBuildImage {
    imageName = "universesimulator/${project.name}:${System.getenv('GITHUB_RUN_NUMBER')}"
    publish = true
    docker {
        publishRegistry {
            username = System.getenv('US_DOCKER_REGISTRY_USER')
            password = System.getenv('US_DOCKER_REGISTRY_TOKEN')
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/nkvaratskhelia/universe-simulator-back-java-common'
        credentials {
            username = System.getenv('US_GITHUB_PACKAGES_USER')
            password = System.getenv('US_GITHUB_PACKAGES_TOKEN')
        }
        metadataSources {
            gradleMetadata()
        }
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.3'
        mavenBom 'org.testcontainers:testcontainers-bom:1.17.2'
    }
}

dependencies {
    implementation 'com.example.universe.simulator:common:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
//    needed for liquibase
    runtimeOnly 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-consul-config'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-sleuth'
    runtimeOnly 'org.liquibase:liquibase-core'
    runtimeOnly 'net.logstash.logback:logstash-logback-encoder:7.2'
//    needed for liquibase
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.springdoc:springdoc-openapi-webflux-ui:1.6.9'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}
